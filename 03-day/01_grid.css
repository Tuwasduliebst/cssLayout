
.father {
    display: grid;
    grid-template-columns: [line01] 100px [line02] 200px [line03] 30px [line04]; /*열 생성, 너비 결정 !!! grid는 inspector에서의 line names을 [ ] 안에 입력하여 정해 줄 수 있다. ;*/
    grid-template-rows: [line05] 200px [line06] 100px [line07]; /*행의 생성, 높이결정*/
    /* gap: 10px; */
    row-gap: 10px;
    column-gap: 20px;
    
}

.child {
    display: flex;
    background-color: tomato;
    color: white;
    font-size: 28px;
    align-items: center;
    justify-content: center;
}
/*
grid-template-columns 

- 속성 목적: Grid 컨테이너 내에서 열의 크기와 개수를 정의합니다. 
- 값: 고정 크기: 예를 들어,grid-template-columns: 100px 200px 100px;는 세 개의 열을 생성하며,
각각의 너비는 100px,200px,100px입니다. 반응형 크기: fr 단위를 사용하여 유연한 크기 조정이 가능합니다. 예를 들어,
grid-template-columns: 1fr 2fr 1fr;는 세 개의 열을 생성하며,가용 공간을 1:2:1의 비율로 분배합니다. 
- 반복 함수: repeat() 함수를 사용하여 반복적인 패턴을 쉽게 정의할 수 있습니다. 예: grid-template-columns: repeat(3, 1fr);는 세 개의 동일한 너비(각 1fr)의 열을 생성합니다. 

grid-template-rows 

- 속성 목적: Grid 컨테이너 내에서 행의 크기와 개수를 정의합니다. 
- 값: 고정 크기: 예를 들어,grid-template-rows: 50px 100px;는 두 개의 행을 생성하며,각각의 높이는 50px과 100px입니다. 
반응형 크기: fr 단위를 사용하여 유연한 크기 조정이 가능합니다. 예를 들어,grid-template-rows: 2fr 1fr;는 두 개의 행을 생성하며,
가용 공간을 2:1의 비율로 분배합니다. 
- 반복 함수: repeat() 함수를 사용하여 반복적인 패턴을 쉽게 정의할 수 있습니다. 예: grid-template-rows: repeat(2, 50px);는 두 개의 동일한 높이(각 50px)의 행을 생성합니다.
*/

.child:last-child {
    background-color: turquoise;
    /*grid-column-start: 2; 2번째 열에서 시작해라! */
    /* grid-column-end: 4; /* 어디에서 끝날지를 정해줌.음수값 -1 은 마지막 라인을 뜻함.  
    그래서 행 전체를 차지하는 레이아웃은 grid-column-start: 1; grid-column-end: -1; 가 된다. 
    */
    grid-column: 2 / -1; /*2 에서 시작, -1 끝까지 채워라 */
}

.child:first-child {
    /* background-color: turquoise; */
    /* grid-row-start: 1;
    grid-row-end: -1; */
    /* 어디에서 끝날지를 정해줌.음수값 -1 은 마지막 라인을 뜻함. 
    그래서 열 전체를 차지하는 레이아웃은 grid-row-start: 1; grid-row-end: -1; 가 된다. 
    */
    grid-row: 1 / -1;
}